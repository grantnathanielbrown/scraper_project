{"version":3,"sources":["wsi-imageoptim-reddit-marketing-.jpg","CategoryForm.js","TermForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CategoryForm","react_default","a","createElement","className","id","onChange","this","props","handleChange","value","Component","TermForm","searchTerm","type","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","category","minScore","numPosts","subreddit","timeframe","postArray","animationTracker","selectedForm","bind","assertThisInitialized","categoryCall","changeForm","risingAnimation","console","log","setState","elements","opacity","anime","targets","duration","translateX","loop","easing","direction","restart","element","translateY","delay","stagger","start","backgroundColor","event","x","target","defineProperty","_this2","backendURL","concat","opacityAnimation","loadingAnimation","that","axios","get","params","then","res","parsedJSON","data","length","i","lengthChecker","title","slice","miniPost","score","url","preview","push","preventDefault","_this3","posts","map","post","key","undefined","enabled","href","src","alt","placeholder","onSubmit","data-toggle","onClick","name","autoComplete","CategoryForm_CategoryForm","TermForm_TermForm","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e5e7b71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wsi-imageoptim-reddit-marketing-.a171ce6d.jpg\";","import React, { Component } from 'react'\n\nexport default class CategoryForm extends Component {            \n    render() {\n        return (\n            <div className=\"category-form\">\n                <label>\n                Category \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;       \n                <select id=\"category\" onChange={this.props.handleChange}>\n                    <option value=\"Best\">Best</option>\n                    <option value=\"Controversial\">Controversial</option>\n                    <option value=\"Hot\">Hot</option>\n                    <option value=\"New\">New</option>\n                    {/* <option value=\"Random\">Random</option> */}\n                    <option value=\"Rising\">Rising</option>\n                    <option value=\"Top\">Top</option>\n                </select>\n                </label>                 \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TermForm extends Component {\n    render() {\n        return (\n            <div className=\"term-form\">\n                <label>\n                Search Keyword \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;       \n                <input id=\"searchTerm\" className=\"rounded search-term\" value={this.props.searchTerm} onChange={this.props.handleChange} type=\"text\"/>\n                </label>                 \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport anime from 'animejs';\nimport axios from 'axios';\n  \nimport CategoryForm from './CategoryForm.js';\n\nimport TermForm from './TermForm.js';\nimport placeholder from './wsi-imageoptim-reddit-marketing-.jpg';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state= {\n      category: \"Best\",\n      minScore: -100,\n      numPosts: 25,\n      subreddit: \"\",\n  \n      searchTerm: \"\",\n      timeframe: \"hour\",\n      \n      postArray: [],\n      animationTracker: false,\n      selectedForm: \"Category\",\n      \n    }  \n    this.handleChange = this.handleChange.bind(this);\n    this.categoryCall = this.categoryCall.bind(this);\n    this.changeForm = this.changeForm.bind(this);\n}\n\n\ncomponentDidMount () {\n  this.risingAnimation('.page-title');\n\n}\n\nchangeForm (state) {\n  console.log();\n  this.setState({\n    selectedForm: state,\n    searchTerm: \"\",\n    category: \"Best\",\n  });\n}\n\nopacityAnimation(elements,opacity) {\n  console.log(elements,opacity);\n  anime({\n    targets: elements,\n    opacity: opacity,\n    duration: 0.01,\n  })\n}\n\nloadingAnimation () {\n  console.log('animation has begun');\n  let orangeCircle = anime({\n    targets: '.orange-circle',\n    translateX: 125,\n    loop: true,\n    easing: 'cubicBezier(0.950, 0.095, 0.060, 0.950)',\n    direction: 'alternate',\n  })\n  orangeCircle.restart();\n  let blueCircle = anime({\n    targets: '.blue-circle',\n    translateX: -125,\n    loop: true,\n    easing: 'cubicBezier(0.950, 0.095, 0.060, 0.950)',\n    direction: 'alternate',\n  })\n  blueCircle.restart();\n\n}\n\n\n\nrisingAnimation (element) {\n  anime({\n    targets: element,\n    translateY: [100,0],\n    opacity: [0,1],\n    delay: anime.stagger(100, {start: 500}),\n    backgroundColor: '#00FFFFFF',\n    duration: 1600,\n  })\n}\n\nhandleChange(event) {\n  // dynamically set the key of the setstate object to be equal to the idea of the specific form\n  let x = event.target.id;\n  this.setState({[x]: event.target.value});\n  } \n        \n\ncategoryCall(event) {\n  let backendURL = `https://scrappy-gnb.herokuapp.com/${this.state.selectedForm}`\n  if (process.env.NODE_ENV === \"development\") {\n    backendURL = `http://localhost:3154/${this.state.selectedForm}`\n  }\n  console.log(backendURL);\n\n  this.opacityAnimation(['.orange-circle','.blue-circle'],1);\n  if (this.state.animationTracker === false) {\n    this.loadingAnimation();\n    this.setState({animationTracker: true});\n  }\n  \n  let that = this;\n\n\n\n  axios.get(backendURL, {\n    params: {\n      category: this.state.category,\n      searchTerm: this.state.searchTerm,\n      minScore: this.state.minScore,\n      numPosts: this.state.numPosts,\n      subreddit: this.state.subreddit\n    }\n  })\n  .then(res => {\n    return res;\n  })\n\n  .then(function(parsedJSON) {\n    \n    let postArray = [];\n\n    console.log(parsedJSON.data.length);\n\n    for (let i = 0; i < parsedJSON.data.length; i++) {\n      let lengthChecker = parsedJSON.data[i].title.length < 150 ? parsedJSON.data[i].title : parsedJSON.data[i].title.slice(0,150) + '...'\n      console.log(parsedJSON.data[i].title.length);\n      let miniPost = {score: parsedJSON.data[i].score,\n      title: lengthChecker,\n      url: parsedJSON.data[i].url,\n      preview: parsedJSON.data[i].preview};\n      postArray.push(miniPost);\n    }\n    that.opacityAnimation(['.orange-circle','.blue-circle'],0)\n    that.setState({postArray: postArray});\n    console.log(that.state.postArray);\n  })\n  .then(data =>{\n    this.risingAnimation('.generated-post');\n  })\n\n  event.preventDefault();\n}\n// undefined = no preview\n  render() {\n    let posts = this.state.postArray.map( (post, key) => {\n    if (post.preview !== undefined && post.preview.enabled !== false) {\n      return (\n        <div className=\"generated-post\">\n          <a href={post.url}>\n            <img src={post.url} alt=\"thumbnail of a Reddit post\"/>\n            <ul className=\"post-title\">{post.title}</ul>\n          </a>\n          <ul>Score: {post.score}</ul>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"generated-post\">\n          <a href={post.url}>\n            <img src={placeholder} alt=\"Reddit logo\"/>\n            <ul className=\"post-title\">{post.title}</ul>\n          </a>\n          <ul>Score: {post.score}</ul>\n        </div>        \n      )\n    }\n\n    })\n    return (\n      <div className=\"App\">\n        <h1 className=\"page-title\">Scrappy</h1>\n        {/* <p className=\"blurb\">Waste your time on Reddit more efficiently.</p> */}\n        <form className=\"request-form column-children\" onSubmit={this.categoryCall}>\n          \n        <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n          <label onClick={() => this.changeForm(\"Category\")} className=\"btn btn-secondary active\">\n            <input type=\"radio\" name=\"options\" id=\"option1\" autoComplete=\"off\"/>\n            Search By Category\n          </label>\n          <label onClick={() => this.changeForm(\"Search\")} className=\"btn btn-secondary\">\n            <input type=\"radio\" name=\"options\" id=\"option2\" autoComplete=\"off\"/>\n            \n            Search By Term\n          </label>\n        </div>\n\n\n          {this.state.selectedForm === \"Category\" \n          ? <CategoryForm handleChange={this.handleChange.bind(this)}/>\n          : <TermForm handleChange={this.handleChange.bind(this)}\n          searchTerm={this.state.searchTerm}/>\n          }\n\n          <label htmlFor=\"minScore\">\n            Minimum Score (upvotes - downvotes) \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input id=\"minScore\" className=\"rounded min-score\" value={this.state.minScore} onChange={this.handleChange} type=\"number\"/>\n          </label>\n\n          <label htmlFor=\"numPosts\">\n            Number of Posts (up to 25)\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input id=\"numPosts\" className=\"rounded num-posts\" value={this.state.numPosts} onChange={this.handleChange} type=\"number\"/>\n          </label>          \n\n          <label htmlFor=\"subreddit\">\n            Subreddit (without the r/)\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input id=\"subreddit\" className=\"rounded subreddit\" value={this.state.subreddit} onChange={this.handleChange} type=\"text\"/>\n          </label>\n\n            <input className=\"form-submit rounded\" value=\"Search\" type=\"submit\" />        \n\n          </form>\n          <div>\n            <span className=\"orange-circle\" id=\"orange-circle\"></span>\n            <span className=\"blue-circle\" id=\"blue-circle\"></span>\n          </div> \n        <div className=\"posts-container\">\n\n          {posts}\n        </div>\n\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}