{"version":3,"sources":["wsi-imageoptim-reddit-marketing-.jpg","GeneratedPost.jsx","CategoryForm.js","TermForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GeneratedPost","props","react_default","a","createElement","className","href","url","src","imageSRC","alt","title","score","CategoryForm","id","onChange","this","handleChange","value","Component","TermForm","searchTerm","type","App","_this","Object","classCallCheck","_super","call","state","category","minScore","numPosts","subreddit","timeframe","postArray","animationTracker","selectedForm","bind","assertThisInitialized","backendCall","changeForm","risingAnimation","setState","elements","opacity","console","log","anime","targets","duration","translateX","loop","easing","direction","restart","element","translateY","delay","stagger","start","backgroundColor","event","target","defineProperty","_this2","backendURL","concat","opacityAnimation","loadingAnimation","that","axios","get","params","then","res","parsedJSON","i","data","length","lengthChecker","slice","miniPost","preview","push","preventDefault","_this3","posts","map","post","key","undefined","enabled","placeholder","data-toggle","data-target","aria-expanded","aria-controls","onSubmit","onClick","name","autoComplete","CategoryForm_CategoryForm","TermForm_TermForm","htmlFor","disabled","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.734dec83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wsi-imageoptim-reddit-marketing-.a171ce6d.jpg\";","import React from 'react'\n\nexport default function GeneratedPost(props) {\n    return (\n        <div className=\"generated-post\">\n        <a href={props.url}>\n          <img src={props.imageSRC} alt=\"thumbnail of a Reddit post\"/>\n          <ul className=\"post-title\">{props.title}</ul>\n        </a>\n        <ul>Score: {props.score}</ul>\n      </div>\n    )\n}\n","import React, { Component } from 'react'\n\nexport default class CategoryForm extends Component {            \n    render() {\n        return (\n            <div className=\"category-form\">\n                <label>\n                Category \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;       \n                <select id=\"category\" onChange={this.props.handleChange}>\n                    <option value=\"Best\">Best</option>\n                    <option value=\"Controversial\">Controversial</option>\n                    <option value=\"Hot\">Hot</option>\n                    <option value=\"New\">New</option>\n                    {/* <option value=\"Random\">Random</option> */}\n                    <option value=\"Rising\">Rising</option>\n                    <option value=\"Top\">Top</option>\n                </select>\n                </label>                 \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TermForm extends Component {\n    render() {\n        return (\n            <div className=\"term-form\">\n                <label>\n                Search Keyword \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;       \n                <input id=\"searchTerm\" className=\"rounded\" value={this.props.searchTerm} onChange={this.props.handleChange} type=\"text\"/>\n                </label>\n\n                <label>\n                Timeframe \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;       \n                <select id=\"category\" onChange={this.props.handleChange}>\n                    <option value=\"Hour\">Hour</option>\n                    <option value=\"Day\">Day</option>\n                    <option value=\"Week\">Week</option>\n                    <option value=\"Month\">Month</option>\n                    {/* <option value=\"Random\">Random</option> */}\n                    <option value=\"Year\">Year</option>\n                    <option value=\"All\">All</option>\n                </select>\n                </label> \n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport anime from 'animejs';\nimport axios from 'axios';\n\nimport GeneratedPost from './GeneratedPost'; \nimport CategoryForm from './CategoryForm.js';\nimport TermForm from './TermForm.js';\n\nimport placeholder from './wsi-imageoptim-reddit-marketing-.jpg';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state= {\n      category: \"Best\",\n      minScore: -100,\n      numPosts: 25,\n      subreddit: \"\",\n  \n      searchTerm: \"\",\n      timeframe: \"hour\",\n      \n      postArray: [],\n      animationTracker: false,\n      selectedForm: \"Category\",\n      \n    } \n    this.handleChange = this.handleChange.bind(this);\n    this.backendCall = this.backendCall.bind(this);\n    this.changeForm = this.changeForm.bind(this);\n}\n\n\ncomponentDidMount () {\n  this.risingAnimation('.page-title');\n}\n\nchangeForm (state) {\n  this.setState({\n    selectedForm: state,\n    searchTerm: \"\",\n    category: \"Best\",\n  });\n}\n\nopacityAnimation(elements,opacity) {\n  console.log(elements,opacity);\n  anime({\n    targets: elements,\n    opacity: opacity,\n    duration: 0.01,\n  })\n}\n\nloadingAnimation () {\n  console.log('animation has begun');\n  let orangeCircle = anime({\n    targets: '.orange-circle',\n    translateX: 125,\n    loop: true,\n    easing: 'cubicBezier(0.950, 0.095, 0.060, 0.950)',\n    direction: 'alternate',\n  })\n  orangeCircle.restart();\n\n  let blueCircle = anime({\n    targets: '.blue-circle',\n    translateX: -125,\n    loop: true,\n    easing: 'cubicBezier(0.950, 0.095, 0.060, 0.950)',\n    direction: 'alternate',\n  })\n  blueCircle.restart();\n\n}\n\n\n\nrisingAnimation (element) {\n  anime({\n    targets: element,\n    translateY: [100,0],\n    opacity: [0,1],\n    delay: anime.stagger(100, {start: 500}),\n    backgroundColor: '#00FFFFFF',\n    duration: 1600,\n  })\n}\n\nhandleChange(event) {\n  // dynamically set the key of the setstate object to be equal to the id of the specific form\n  let category = event.target.id;\n  this.setState({[category]: event.target.value});\n} \n        \n\nbackendCall(event) {\n  let backendURL = `https://scrappy-gnb.herokuapp.com/${this.state.selectedForm}`\n  if (process.env.NODE_ENV === \"development\") {\n    backendURL = `http://localhost:3154/${this.state.selectedForm}`\n  }\n  console.log(backendURL);\n\n  this.opacityAnimation(['.orange-circle','.blue-circle'],1);\n  \n  if (this.state.animationTracker === false) {\n    this.loadingAnimation();\n    this.setState({animationTracker: true});\n  }\n  \n  let that = this;\n\n\n\n  axios.get(backendURL, {\n    params: {\n      category: this.state.category,\n      searchTerm: this.state.searchTerm,\n      minScore: this.state.minScore,\n      numPosts: this.state.numPosts,\n      subreddit: this.state.subreddit\n    }\n  })\n  .then(res => {\n    return res;\n  })\n\n  .then(function(parsedJSON) {\n    \n    let postArray = [];\n\n    for (let i = 0; i < parsedJSON.data.length; i++) {\n      let lengthChecker = parsedJSON.data[i].title.length < 150 ? parsedJSON.data[i].title : parsedJSON.data[i].title.slice(0,150) + '...'\n      let miniPost = {score: parsedJSON.data[i].score,\n      title: lengthChecker,\n      url: parsedJSON.data[i].url,\n      preview: parsedJSON.data[i].preview};\n      postArray.push(miniPost);\n    };\n    that.opacityAnimation(['.orange-circle','.blue-circle'],0)\n    that.setState({postArray: postArray});\n    console.log(that.state.postArray);\n  })\n  .then(data => {\n    this.risingAnimation('.generated-post');\n  })\n\n  event.preventDefault();\n}\n// undefined = no preview\n  render() {\n\n    let posts = this.state.postArray.map( (post, key) => {\n    if (post.preview !== undefined && post.preview.enabled !== false) {\n      return (\n        <GeneratedPost url={post.url} imageSRC={post.url} title={post.title} score={post.score}/>\n      )\n    } else {\n      return (\n        <GeneratedPost url={post.url} imageSRC={placeholder} title={post.title} score={post.score}/>       \n      )\n    }\n\n    })\n    return (\n      <div className=\"App\">\n        <h1 className=\"page-title\">Scrappy</h1>\n        <p>\n          <button id=\"about-button\" className=\"btn btn-primary button-triad\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\n            About\n          </button>\n        </p>\n        <div className=\"collapse\" id=\"collapseExample\">\n          <div className=\"card card-body\">\n          The chief goal of this project is to learn more about APIs, scripting, and React. My project has two desired features - first, to allow users to view Reddit posts based on certain queries that Reddit itself does not allow users to search by. Second, to allow users to download searched content in aggregation.\n          </div>\n          \n        </div>        \n        <form className=\"request-form column-children\" onSubmit={this.backendCall}>\n          \n        <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n          <label onClick={() => this.changeForm(\"Category\")} className=\"category-label btn btn-secondary active button-triad\">\n            <input type=\"radio\" name=\"options\" id=\"option1\" autoComplete=\"off\"/>\n            Search By Category\n          </label>\n\n          <label onClick={() => this.changeForm(\"Search\")} className=\"search-label btn btn-secondary button-triad\">\n            <input type=\"radio\" name=\"options\" id=\"option2\" autoComplete=\"off\"/>            \n            Search By Term\n          </label>\n        </div>\n\n\n          {this.state.selectedForm === \"Category\" \n          ? <CategoryForm handleChange={this.handleChange.bind(this)}/>\n          : <TermForm handleChange={this.handleChange.bind(this)}\n          searchTerm={this.state.searchTerm} timeframe={this.state.timeframe} />\n          }\n\n          <label htmlFor=\"minScore\">\n            Minimum Score (upvotes - downvotes) \t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input id=\"minScore\" className=\"rounded min-score\" value={this.state.minScore} onChange={this.handleChange} type=\"number\"/>\n          </label>\n\n          <label htmlFor=\"numPosts\">\n            Number of Posts (up to 25)\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input id=\"numPosts\" className=\"rounded num-posts\" value={this.state.numPosts} onChange={this.handleChange} type=\"number\"/>\n          </label>\n\n          {this.state.category === \"Best\" && this.state.selectedForm === \"Category\" ? \n          <label htmlFor=\"subreddit\">\n            Subreddit (without the r/)\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input disabled id=\"subreddit\" className=\"rounded subreddit\" value=\"Does not work for 'best'\" onChange={this.handleChange} type=\"text\"/>\n          </label> :\n          <label htmlFor=\"subreddit\">\n            Subreddit (without the r/)\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\t&nbsp;\n            <input id=\"subreddit\" className=\"rounded subreddit\" value={this.state.subreddit} onChange={this.handleChange} type=\"text\"/>\n          </label>\n        }          \n\n\n            <input className=\"form-submit rounded\" value=\"Search\" type=\"submit\" />        \n\n          </form>\n          <div>\n            <span data-testid=\"orange-circle\" className=\"orange-circle\" id=\"orange-circle\"></span>\n            <span className=\"blue-circle\" id=\"blue-circle\"></span>\n          </div>\n\n        <div className=\"posts-container\">\n          {posts}\n        </div>\n\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}